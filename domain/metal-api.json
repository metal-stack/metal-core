{
  "swagger": "2.0",
  "info": {
    "description": "Resource for managing pure metal",
    "title": "metal-api",
    "contact": {
      "name": "Devops Team",
      "url": "http://www.f-i-ts.de",
      "email": "devops@f-i-ts.de"
    },
    "license": {
      "name": "MIT",
      "url": "http://mit.org"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/v1/firewall": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "firewall"
        ],
        "summary": "get all known firewalls",
        "operationId": "listFirewalls",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.FirewallListResponse"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/firewall/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "firewall"
        ],
        "summary": "allocate a firewall",
        "operationId": "allocateFirewall",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.FirewallCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.FirewallDetailResponse"
            }
          },
          "404": {
            "description": "No free firewall for allocation found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/firewall/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "firewall"
        ],
        "summary": "get firewall by id",
        "operationId": "findFirewall",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the firewall",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.FirewallDetailResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/health": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "perform a healtcheck",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.status"
            }
          },
          "500": {
            "description": "Unhealthy",
            "schema": {
              "$ref": "#/definitions/rest.status"
            }
          }
        }
      }
    },
    "/v1/image": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "get all images",
        "operationId": "listImages",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.ImageListResponse"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "create an image. if the given ID already exists a conflict is returned",
        "operationId": "createImage",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ImageCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ImageDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "updates an image. if the image was changed since this one was read, a conflict is returned",
        "operationId": "updateImage",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ImageUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ImageDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/image/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "get image by id",
        "operationId": "findImage",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the image",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ImageDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "image"
        ],
        "summary": "deletes an image and returns the deleted entity",
        "operationId": "deleteImage",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the image",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ImageDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/ip": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ip"
        ],
        "summary": "get all ips",
        "operationId": "listIPs",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.IPListResponse"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ip"
        ],
        "summary": "updates an ip. if the ip was changed since this one was read, a conflict is returned",
        "operationId": "updateIP",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/ip/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ip"
        ],
        "summary": "allocate an ip in the given network for a project.",
        "operationId": "allocateIP",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPAllocateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.IPDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/ip/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ip"
        ],
        "summary": "get ip by id",
        "operationId": "findIP",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the ip",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ip"
        ],
        "summary": "deletes an ip and returns the deleted entity",
        "operationId": "deleteIP",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the ip",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "get all known machines",
        "operationId": "listMachines",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metal.Machine"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "allocate a machine",
        "operationId": "allocateMachine",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.AllocateMachine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Machine"
            }
          },
          "404": {
            "description": "No free machine for allocation found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/find": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "search machines",
        "operationId": "searchMachine",
        "parameters": [
          {
            "type": "string",
            "description": "one of the MAC address of the machine",
            "name": "mac",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metal.Machine"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/liveliness": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "checks machine liveliness",
        "operationId": "checkMachineLiveliness",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.MachineLivelinessReport"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/phoneHome": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "phone back home from the machine",
        "operationId": "phoneHome",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.PhoneHomeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Machine could not be found by id",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "register a machine",
        "operationId": "registerMachine",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.RegisterMachine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Machine"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/metal.Machine"
            }
          },
          "404": {
            "description": "one of the given key values was not found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "get machine by id",
        "operationId": "findMachine",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Machine"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/bios": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "sends a bios to the machine",
        "operationId": "machineBios",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.MachineAllocation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/event": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "get the current machine provisioning event container",
        "operationId": "getProvisioningEventContainer",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.ProvisioningEventContainer"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "adds a machine provisioning event",
        "operationId": "addProvisioningEvent",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.ProvisioningEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/free": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "free a machine",
        "operationId": "freeMachine",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Machine"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/ipmi": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "returns the IPMI connection data for a machine",
        "operationId": "ipmiData",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.IPMI"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/off": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "sends a power-off to the machine",
        "operationId": "machineOff",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.MachineAllocation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/on": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "sends a power-on to the machine",
        "operationId": "machineOn",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.MachineAllocation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/report": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "send the allocation report of a given machine",
        "operationId": "allocationReport",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.ReportAllocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.MachineAllocation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/reset": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "sends a reset to the machine",
        "operationId": "machineReset",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.MachineAllocation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/state": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "set the state of a machine",
        "operationId": "setMachineState",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.MachineState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Machine"
            }
          },
          "404": {
            "description": "one of the given key values was not found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machine/{id}/wait": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "machine"
        ],
        "summary": "wait for an allocation of this machine",
        "operationId": "waitForAllocation",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the machine",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.MachineWithPhoneHomeToken"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "504": {
            "description": "Timeout",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/network": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "get all networks",
        "operationId": "listNetworks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.NetworkListResponse"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "create an network. if the given ID already exists a conflict is returned",
        "operationId": "createNetwork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.NetworkDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "updates an network. if the network was changed since this one was read, a conflict is returned",
        "operationId": "updateNetwork",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/network/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "get network by id",
        "operationId": "findNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the network",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "deletes an network and returns the deleted entity",
        "operationId": "deleteNetwork",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the network",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/partition": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Partition"
        ],
        "summary": "get all Partitions",
        "operationId": "listPartitions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.PartitionListResponse"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Partition"
        ],
        "summary": "create a Partition. if the given ID already exists a conflict is returned",
        "operationId": "createPartition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PartitionCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PartitionDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Partition"
        ],
        "summary": "updates a Partition. if the Partition was changed since this one was read, a conflict is returned",
        "operationId": "updatePartition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PartitionUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PartitionDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/partition/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Partition"
        ],
        "summary": "get Partition by id",
        "operationId": "findPartition",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the Partition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PartitionDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Partition"
        ],
        "summary": "deletes a Partition and returns the deleted entity",
        "operationId": "deletePartition",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the Partition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PartitionDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/size": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "size"
        ],
        "summary": "get all sizes",
        "operationId": "listSizes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.SizeListResponse"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "size"
        ],
        "summary": "create a size. if the given ID already exists a conflict is returned",
        "operationId": "createSize",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.SizeCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.SizeDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "size"
        ],
        "summary": "updates a size. if the size was changed since this one was read, a conflict is returned",
        "operationId": "updateSize",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.SizeUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SizeDetailResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/size/from-hardware": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "size"
        ],
        "summary": "Searches all sizes for one to match the given hardwarespecs. If nothing is found, a list of entries is returned which describe the constraint which did not match",
        "operationId": "fromHardware",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.MachineHardware"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.SizeMatchingLog"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metal.SizeMatchingLog"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/size/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "size"
        ],
        "summary": "get size by id",
        "operationId": "findSize",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the size",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SizeDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "size"
        ],
        "summary": "deletes an size and returns the deleted entity",
        "operationId": "deleteSize",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the size",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SizeDetailResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/switch": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "switch"
        ],
        "summary": "get all switches",
        "operationId": "listSwitches",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metal.Switch"
              }
            }
          }
        }
      }
    },
    "/v1/switch/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "switch"
        ],
        "summary": "register a switch",
        "operationId": "registerSwitch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metal.RegisterSwitch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Switch"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/metal.Switch"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/switch/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "switch"
        ],
        "summary": "get switch by id",
        "operationId": "findSwitch",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the switch",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Switch"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "switch"
        ],
        "summary": "deletes an switch and returns the deleted entity",
        "operationId": "deleteSwitch",
        "parameters": [
          {
            "type": "string",
            "description": "identifier of the switch",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/metal.Switch"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        }
      }
    },
    "/v1/version": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "version"
        ],
        "summary": "returns the current version information of this module",
        "operationId": "info",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "httperrors.HTTPErrorResponse": {
      "required": [
        "statuscode",
        "message"
      ],
      "properties": {
        "message": {
          "description": "error message",
          "type": "string"
        },
        "statuscode": {
          "description": "http status code",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "metal.AllocateMachine": {
      "required": [
        "tenant",
        "hostname",
        "projectid",
        "partitionid",
        "sizeid",
        "imageid",
        "ssh_pub_keys",
        "tags",
        "networks",
        "ips",
        "ha"
      ],
      "properties": {
        "description": {
          "description": "the description for the allocated machine",
          "type": "string"
        },
        "ha": {
          "description": "if set to true, this firewall is set up in a High Available manner. optional",
          "type": "boolean"
        },
        "hostname": {
          "description": "the hostname for the allocated machine",
          "type": "string"
        },
        "imageid": {
          "description": "the image id to assign this machine to",
          "type": "string"
        },
        "ips": {
          "description": "the additional ips of this firewall, optional.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "the new name for the allocated machine",
          "type": "string"
        },
        "networks": {
          "description": "the networks of this firewall, required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partitionid": {
          "description": "the partition id to assign this machine to",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to assign this machine to",
          "type": "string"
        },
        "sizeid": {
          "description": "the size id to assign this machine to",
          "type": "string"
        },
        "ssh_pub_keys": {
          "description": "the public ssh keys to access the machine with",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "description": "tags for this machine",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenant": {
          "description": "the name of the owning tenant",
          "type": "string"
        },
        "user_data": {
          "description": "cloud-init.io compatible userdata must be base64 encoded.",
          "type": "string"
        },
        "uuid": {
          "description": "if this field is set, this specific machine will be allocated if it is not in available state and not currently allocated. this field overrules size and partition",
          "type": "string"
        }
      }
    },
    "metal.BlockDevice": {
      "required": [
        "name",
        "size"
      ],
      "properties": {
        "name": {
          "description": "the name of this block device",
          "type": "string"
        },
        "size": {
          "description": "the size of this block device",
          "type": "integer"
        }
      }
    },
    "metal.BootConfiguration": {
      "required": [
        "ImageURL",
        "KernelURL",
        "CommandLine"
      ],
      "properties": {
        "CommandLine": {
          "type": "string"
        },
        "ImageURL": {
          "type": "string"
        },
        "KernelURL": {
          "type": "string"
        }
      }
    },
    "metal.Connection": {
      "required": [
        "nic"
      ],
      "properties": {
        "machine_id": {
          "description": "the machine id of the machine connected to the nic",
          "type": "string"
        },
        "nic": {
          "description": "a network interface on the switch",
          "$ref": "#/definitions/metal.Nic"
        }
      }
    },
    "metal.Constraint": {
      "required": [
        "Type",
        "Min",
        "Max"
      ],
      "properties": {
        "Max": {
          "type": "integer"
        },
        "Min": {
          "type": "integer"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "metal.ConstraintMatchingLog": {
      "required": [
        "match"
      ],
      "properties": {
        "constraint": {
          "$ref": "#/definitions/metal.Constraint"
        },
        "log": {
          "type": "string"
        },
        "match": {
          "type": "boolean"
        }
      }
    },
    "metal.Fru": {
      "properties": {
        "board_mfg": {
          "description": "the board mfg",
          "type": "string"
        },
        "board_mfg_serial": {
          "description": "the board mfg serial",
          "type": "string"
        },
        "board_part_number": {
          "description": "the board part number",
          "type": "string"
        },
        "chassis_part_number": {
          "description": "the chassis part number",
          "type": "string"
        },
        "chassis_part_serial": {
          "description": "the chassis part serial",
          "type": "string"
        },
        "product_manufacturer": {
          "description": "the product manufacturer",
          "type": "string"
        },
        "product_part_number": {
          "description": "the product part number",
          "type": "string"
        },
        "product_serial": {
          "description": "the product serial",
          "type": "string"
        }
      }
    },
    "metal.IPMI": {
      "description": "The IPMI connection data\nThe Field Replaceable Unit data",
      "required": [
        "address",
        "mac",
        "user",
        "password",
        "interface",
        "fru"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "fru": {
          "$ref": "#/definitions/metal.Fru"
        },
        "interface": {
          "type": "string"
        },
        "mac": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "metal.Image": {
      "required": [
        "id",
        "URL",
        "Features"
      ],
      "properties": {
        "Features": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "URL": {
          "type": "string"
        },
        "changed": {
          "description": "the last changed timestamp",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "a unique ID",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "the readable name",
          "type": "string"
        }
      }
    },
    "metal.Machine": {
      "description": "A machine representing a bare metal machine.",
      "required": [
        "id",
        "partition",
        "rackid",
        "size",
        "hardware",
        "allocation",
        "tags",
        "state",
        "liveliness",
        "events"
      ],
      "properties": {
        "allocation": {
          "description": "the allocation data of an allocated machine",
          "$ref": "#/definitions/metal.MachineAllocation"
        },
        "changed": {
          "description": "the last changed timestamp",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "events": {
          "description": "recent events of this machine during provisioning",
          "$ref": "#/definitions/metal.RecentProvisioningEvents"
        },
        "hardware": {
          "description": "the hardware of this machine",
          "$ref": "#/definitions/metal.MachineHardware"
        },
        "id": {
          "description": "a unique ID",
          "type": "string",
          "uniqueItems": true
        },
        "liveliness": {
          "description": "the liveliness of this machine",
          "type": "string"
        },
        "name": {
          "description": "the readable name",
          "type": "string"
        },
        "partition": {
          "description": "the partition assigned to this machine",
          "$ref": "#/definitions/metal.Partition",
          "readOnly": true
        },
        "rackid": {
          "description": "the rack assigned to this machine",
          "type": "string",
          "readOnly": true
        },
        "size": {
          "description": "the size of this machine",
          "$ref": "#/definitions/metal.Size",
          "readOnly": true
        },
        "state": {
          "description": "the state of this machine",
          "$ref": "#/definitions/metal.MachineState"
        },
        "tags": {
          "description": "tags for this machine",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "metal.MachineAllocation": {
      "required": [
        "created",
        "name",
        "tenant",
        "project",
        "networks",
        "hostname",
        "ssh_pub_keys"
      ],
      "properties": {
        "console_password": {
          "description": "the console password which was generated while provisioning",
          "type": "string"
        },
        "created": {
          "description": "the time when the machine was created",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "a description for this machine",
          "type": "string"
        },
        "hostname": {
          "description": "the hostname which will be used when creating the machine",
          "type": "string"
        },
        "image": {
          "description": "the image assigned to this machine",
          "$ref": "#/definitions/metal.Image",
          "readOnly": true
        },
        "last_ping": {
          "description": "the timestamp of the last phone home call/ping from the machine",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "name": {
          "description": "the name of the machine",
          "type": "string"
        },
        "networks": {
          "description": "the networks of this machine",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.MachineNetwork"
          }
        },
        "project": {
          "description": "the project that this machine is assigned to",
          "type": "string"
        },
        "ssh_pub_keys": {
          "description": "the public ssh keys to access the machine with",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenant": {
          "description": "the tenant that this machine is assigned to",
          "type": "string"
        },
        "user_data": {
          "description": "userdata to execute post installation tasks",
          "type": "string"
        }
      }
    },
    "metal.MachineHardware": {
      "required": [
        "memory",
        "cpu_cores",
        "nics",
        "disks"
      ],
      "properties": {
        "cpu_cores": {
          "description": "the number of cpu cores",
          "type": "integer",
          "format": "int32"
        },
        "disks": {
          "description": "the list of block devices of this machine",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.BlockDevice"
          }
        },
        "memory": {
          "description": "the total memory of the machine",
          "type": "integer"
        },
        "nics": {
          "description": "the list of network interfaces of this machine",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.Nic"
          }
        }
      }
    },
    "metal.MachineLivelinessReport": {
      "required": [
        "alive_count",
        "dead_count",
        "unknown_count"
      ],
      "properties": {
        "alive_count": {
          "description": "the number of machines alive",
          "type": "integer",
          "format": "int32"
        },
        "dead_count": {
          "description": "the number of dead machines",
          "type": "integer",
          "format": "int32"
        },
        "unknown_count": {
          "description": "the number of machines with unknown liveliness",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "metal.MachineNetwork": {
      "required": [
        "networkid",
        "ips",
        "vrf",
        "primary",
        "asn"
      ],
      "properties": {
        "asn": {
          "description": "ASN number for this network in the bgp configuration",
          "type": "integer",
          "format": "int64"
        },
        "ips": {
          "description": "the ip addresses of the allocated machine in this vrf",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkid": {
          "description": "the networkID of the allocated machine in this vrf",
          "type": "string"
        },
        "primary": {
          "description": "this network is the primary vrf of the allocated machine, aka tenant vrf",
          "type": "boolean"
        },
        "vrf": {
          "description": "the vrf of the allocated machine",
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "metal.MachineState": {
      "required": [
        "value",
        "description"
      ],
      "properties": {
        "description": {
          "description": "a description why this machine is in the given state",
          "type": "string"
        },
        "value": {
          "description": "the state of this machine. empty means available for all",
          "type": "string"
        }
      }
    },
    "metal.MachineWithPhoneHomeToken": {
      "required": [
        "machine",
        "phone_home_token"
      ],
      "properties": {
        "machine": {
          "$ref": "#/definitions/metal.Machine"
        },
        "phone_home_token": {
          "type": "string"
        }
      }
    },
    "metal.Nic": {
      "required": [
        "mac",
        "name",
        "neighbors"
      ],
      "properties": {
        "mac": {
          "description": "the mac address of this network interface",
          "type": "string"
        },
        "name": {
          "description": "the name of this network interface",
          "type": "string"
        },
        "neighbors": {
          "description": "the neighbors visible to this network interface",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.Nic"
          }
        },
        "vrf": {
          "description": "the vrf this network interface is part of",
          "type": "string"
        }
      }
    },
    "metal.Partition": {
      "required": [
        "id",
        "BootConfiguration",
        "MgmtServiceAddress",
        "ProjectNetworkPrefixLength"
      ],
      "properties": {
        "BootConfiguration": {
          "$ref": "#/definitions/metal.BootConfiguration"
        },
        "MgmtServiceAddress": {
          "type": "string"
        },
        "ProjectNetworkPrefixLength": {
          "type": "integer",
          "format": "int32"
        },
        "changed": {
          "description": "the last changed timestamp",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "a unique ID",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "the readable name",
          "type": "string"
        }
      }
    },
    "metal.PhoneHomeRequest": {
      "required": [
        "phone_home_token"
      ],
      "properties": {
        "phone_home_token": {
          "description": "the jwt that was issued for the machine",
          "type": "string"
        }
      }
    },
    "metal.ProvisioningEvent": {
      "required": [
        "event"
      ],
      "properties": {
        "event": {
          "description": "the event emitted by the machine",
          "type": "string"
        },
        "message": {
          "description": "an additional message to add to the event",
          "type": "string"
        },
        "time": {
          "description": "the time that this event was received",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "metal.ProvisioningEventContainer": {
      "required": [
        "id",
        "events",
        "last_event_time",
        "incomplete_provisioning_cycles"
      ],
      "properties": {
        "events": {
          "description": "the history of machine provisioning events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.ProvisioningEvent"
          }
        },
        "id": {
          "description": "references the machine",
          "type": "string"
        },
        "incomplete_provisioning_cycles": {
          "description": "the amount of incomplete provisioning cycles in the event container",
          "type": "string"
        },
        "last_event_time": {
          "description": "the time where the last event was received",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "metal.RecentProvisioningEvents": {
      "required": [
        "log",
        "last_event_time",
        "incomplete_provisioning_cycles"
      ],
      "properties": {
        "incomplete_provisioning_cycles": {
          "description": "the amount of incomplete provisioning cycles in the event container",
          "type": "string"
        },
        "last_event_time": {
          "description": "the time where the last event was received",
          "type": "string",
          "format": "date-time"
        },
        "log": {
          "description": "the log of recent machine provisioning events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.ProvisioningEvent"
          }
        }
      }
    },
    "metal.RegisterMachine": {
      "required": [
        "uuid",
        "partitionid",
        "rackid",
        "hardware",
        "ipmi",
        "tags"
      ],
      "properties": {
        "hardware": {
          "description": "the hardware of this machine",
          "$ref": "#/definitions/metal.MachineHardware"
        },
        "ipmi": {
          "description": "the ipmi access infos",
          "$ref": "#/definitions/metal.IPMI"
        },
        "partitionid": {
          "description": "the partition id to register this machine with",
          "type": "string"
        },
        "rackid": {
          "description": "the rack id where this machine is connected to",
          "type": "string"
        },
        "tags": {
          "description": "tags for this machine",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uuid": {
          "description": "the product uuid of the machine to register",
          "type": "string"
        }
      }
    },
    "metal.RegisterSwitch": {
      "required": [
        "id",
        "nics",
        "partition_id",
        "rack_id"
      ],
      "properties": {
        "id": {
          "description": "a unique ID",
          "type": "string",
          "uniqueItems": true
        },
        "nics": {
          "description": "the list of network interfaces on the switch",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.Nic"
          }
        },
        "partition_id": {
          "description": "the id of the partition in which this switch is located",
          "type": "string"
        },
        "rack_id": {
          "description": "the id of the rack in which this switch is located",
          "type": "string"
        }
      }
    },
    "metal.ReportAllocation": {
      "required": [
        "success",
        "console_password"
      ],
      "properties": {
        "console_password": {
          "description": "the console password which was generated while provisioning",
          "type": "string"
        },
        "errormessage": {
          "description": "contains an errormessage when there was no success",
          "type": "string"
        },
        "success": {
          "description": "signals if the allocation was successful",
          "type": "boolean"
        }
      }
    },
    "metal.Size": {
      "required": [
        "id",
        "Constraints"
      ],
      "properties": {
        "Constraints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.Constraint"
          }
        },
        "changed": {
          "description": "the last changed timestamp",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "a unique ID",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "the readable name",
          "type": "string"
        }
      }
    },
    "metal.SizeMatchingLog": {
      "required": [
        "name",
        "match"
      ],
      "properties": {
        "constraints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.ConstraintMatchingLog"
          }
        },
        "log": {
          "type": "string"
        },
        "match": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "metal.Switch": {
      "description": "A switch that can register at the api.",
      "required": [
        "id",
        "nics",
        "connections",
        "partition_id",
        "rack_id",
        "partition"
      ],
      "properties": {
        "changed": {
          "description": "the last changed timestamp",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "connections": {
          "description": "a connection between a switch port and a machine",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.Connection"
          }
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "a unique ID",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "the readable name",
          "type": "string"
        },
        "nics": {
          "description": "the list of network interfaces on the switch",
          "type": "array",
          "items": {
            "$ref": "#/definitions/metal.Nic"
          }
        },
        "partition": {
          "description": "the partition in which this switch is located",
          "$ref": "#/definitions/metal.Partition"
        },
        "partition_id": {
          "description": "the id of the partition in which this switch is located",
          "type": "string"
        },
        "rack_id": {
          "description": "the id of the rack in which this switch is located",
          "type": "string"
        }
      }
    },
    "rest.status": {
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "rest.version": {
      "required": [
        "name",
        "version",
        "builddate",
        "revision",
        "gitsha1"
      ],
      "properties": {
        "builddate": {
          "type": "string"
        },
        "gitsha1": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1.FirewallCreateRequest": {
      "required": [
        "sizeid",
        "ssh_pub_keys",
        "ips",
        "partitionid",
        "hostname",
        "tags",
        "ha",
        "imageid",
        "networks",
        "tenant",
        "projectid"
      ],
      "properties": {
        "description": {
          "description": "the description for the allocated machine",
          "type": "string"
        },
        "ha": {
          "description": "if set to true, this firewall is set up in a High Available manner. optional",
          "type": "boolean"
        },
        "hostname": {
          "description": "the hostname for the allocated machine",
          "type": "string"
        },
        "imageid": {
          "description": "the image id to assign this machine to",
          "type": "string"
        },
        "ips": {
          "description": "the additional ips of this firewall, optional.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "the new name for the allocated machine",
          "type": "string"
        },
        "networks": {
          "description": "the networks of this firewall, required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partitionid": {
          "description": "the partition id to assign this machine to",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to assign this machine to",
          "type": "string"
        },
        "sizeid": {
          "description": "the size id to assign this machine to",
          "type": "string"
        },
        "ssh_pub_keys": {
          "description": "the public ssh keys to access the machine with",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "description": "tags for this machine",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenant": {
          "description": "the name of the owning tenant",
          "type": "string"
        },
        "user_data": {
          "description": "cloud-init.io compatible userdata must be base64 encoded.",
          "type": "string"
        },
        "uuid": {
          "description": "if this field is set, this specific machine will be allocated if it is not in available state and not currently allocated. this field overrules size and partition",
          "type": "string"
        }
      }
    },
    "v1.FirewallDetailResponse": {
      "required": [
        "tags",
        "state",
        "id",
        "allocation",
        "events",
        "rackid",
        "size",
        "liveliness",
        "hardware",
        "partition"
      ],
      "properties": {
        "allocation": {
          "description": "the allocation data of an allocated machine",
          "$ref": "#/definitions/metal.MachineAllocation"
        },
        "changed": {
          "description": "the last changed timestamp",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "events": {
          "description": "recent events of this machine during provisioning",
          "$ref": "#/definitions/metal.RecentProvisioningEvents"
        },
        "hardware": {
          "description": "the hardware of this machine",
          "$ref": "#/definitions/metal.MachineHardware"
        },
        "id": {
          "description": "a unique ID",
          "type": "string",
          "uniqueItems": true
        },
        "liveliness": {
          "description": "the liveliness of this machine",
          "type": "string"
        },
        "name": {
          "description": "the readable name",
          "type": "string"
        },
        "partition": {
          "description": "the partition assigned to this machine",
          "$ref": "#/definitions/metal.Partition",
          "readOnly": true
        },
        "rackid": {
          "description": "the rack assigned to this machine",
          "type": "string",
          "readOnly": true
        },
        "size": {
          "description": "the size of this machine",
          "$ref": "#/definitions/metal.Size",
          "readOnly": true
        },
        "state": {
          "description": "the state of this machine",
          "$ref": "#/definitions/metal.MachineState"
        },
        "tags": {
          "description": "tags for this machine",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.FirewallListResponse": {
      "required": [
        "id",
        "partitionid",
        "projectid",
        "networks"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networks": {
          "description": "the networks of this firewall, required.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.FirewallNetwork"
          }
        },
        "partitionid": {
          "description": "the partition this firewall belongs to.",
          "type": "string"
        },
        "projectid": {
          "description": "the project this firewall belongs to, can be empty if globally available.",
          "type": "string"
        }
      }
    },
    "v1.FirewallNetwork": {
      "required": [
        "networkid",
        "ips",
        "vrf",
        "primary",
        "asn"
      ],
      "properties": {
        "asn": {
          "description": "ASN number for this network in the bgp configuration",
          "type": "integer",
          "format": "int32"
        },
        "ips": {
          "description": "the ip addresses of the allocated machine in this vrf",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networkid": {
          "description": "the networkID of the allocated machine in this vrf",
          "type": "string"
        },
        "primary": {
          "description": "this network is the primary vrf of the allocated machine, aka tenant vrf",
          "type": "boolean"
        },
        "vrf": {
          "description": "the vrf of the allocated machine",
          "type": "integer",
          "format": "integer"
        }
      }
    },
    "v1.IPAllocateRequest": {
      "required": [
        "projectid",
        "networkid"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networkid": {
          "description": "the network this ip allocate request address belongs to",
          "type": "string"
        },
        "projectid": {
          "description": "the project this ip address belongs to",
          "type": "string"
        }
      }
    },
    "v1.IPDetailResponse": {
      "required": [
        "networkid",
        "projectid",
        "ipaddress",
        "created",
        "changed"
      ],
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "ipaddress": {
          "description": "the address (ipv4 or ipv6) of this ip",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networkid": {
          "description": "the network this ip allocate request address belongs to",
          "type": "string"
        },
        "projectid": {
          "description": "the project this ip address belongs to",
          "type": "string"
        }
      }
    },
    "v1.IPListResponse": {
      "required": [
        "projectid",
        "networkid",
        "ipaddress"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "ipaddress": {
          "description": "the address (ipv4 or ipv6) of this ip",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networkid": {
          "description": "the network this ip allocate request address belongs to",
          "type": "string"
        },
        "projectid": {
          "description": "the project this ip address belongs to",
          "type": "string"
        }
      }
    },
    "v1.IPUpdateRequest": {
      "required": [
        "ipaddress"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "ipaddress": {
          "description": "the address (ipv4 or ipv6) of this ip",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      }
    },
    "v1.ImageCreateRequest": {
      "required": [
        "id",
        "url"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "features": {
          "description": "features of this image",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "url": {
          "description": "the url of this image",
          "type": "string"
        }
      }
    },
    "v1.ImageDetailResponse": {
      "required": [
        "id",
        "changed",
        "created"
      ],
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "features": {
          "description": "features of this image",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "url": {
          "description": "the url of this image",
          "type": "string"
        }
      }
    },
    "v1.ImageListResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "features": {
          "description": "features of this image",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "url": {
          "description": "the url of this image",
          "type": "string"
        }
      }
    },
    "v1.ImageUpdateRequest": {
      "required": [
        "id"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "features": {
          "description": "features of this image",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "url": {
          "description": "the url of this image",
          "type": "string"
        }
      }
    },
    "v1.NetworkCreateRequest": {
      "required": [
        "primary",
        "prefixes",
        "nat"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "nat": {
          "description": "if set to true, packets leaving this network get masqueraded behind interface ip",
          "type": "boolean"
        },
        "partitionid": {
          "description": "the partition this network belongs to",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primary": {
          "description": "if set to true, this network is attached to a machine/firewall",
          "type": "boolean"
        },
        "projectid": {
          "description": "the project this network belongs to, can be empty if globally available",
          "type": "string"
        }
      }
    },
    "v1.NetworkDetailResponse": {
      "required": [
        "primary",
        "prefixes",
        "nat",
        "id",
        "usage",
        "created",
        "changed"
      ],
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "nat": {
          "description": "if set to true, packets leaving this network get masqueraded behind interface ip",
          "type": "boolean"
        },
        "partitionid": {
          "description": "the partition this network belongs to",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primary": {
          "description": "if set to true, this network is attached to a machine/firewall",
          "type": "boolean"
        },
        "projectid": {
          "description": "the project this network belongs to, can be empty if globally available",
          "type": "string"
        },
        "usage": {
          "description": "usage of ips and prefixes in this network",
          "$ref": "#/definitions/v1.NetworkUsage"
        }
      }
    },
    "v1.NetworkListResponse": {
      "required": [
        "id",
        "prefixes",
        "nat",
        "primary",
        "usage"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "nat": {
          "description": "if set to true, packets leaving this network get masqueraded behind interface ip",
          "type": "boolean"
        },
        "partitionid": {
          "description": "the partition this network belongs to",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primary": {
          "description": "if set to true, this network is attached to a machine/firewall",
          "type": "boolean"
        },
        "projectid": {
          "description": "the project this network belongs to, can be empty if globally available",
          "type": "string"
        },
        "usage": {
          "description": "usage of ips and prefixes in this network",
          "$ref": "#/definitions/v1.NetworkUsage"
        }
      }
    },
    "v1.NetworkUpdateRequest": {
      "required": [
        "id"
      ],
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.NetworkUsage": {
      "required": [
        "available_ips",
        "used_ips",
        "available_prefixes",
        "used_prefixes"
      ],
      "properties": {
        "available_ips": {
          "description": "the total available IPs",
          "type": "integer"
        },
        "available_prefixes": {
          "description": "the total available Prefixes",
          "type": "integer"
        },
        "used_ips": {
          "description": "the total used IPs",
          "type": "integer"
        },
        "used_prefixes": {
          "description": "the total used Prefixes",
          "type": "integer"
        }
      }
    },
    "v1.PartitionBootConfiguration": {
      "description": "a partition has a distinct location in a data center, individual entities belong to a partition",
      "properties": {
        "commandline": {
          "description": "the cmdline to the kernel for the boot image",
          "type": "string"
        },
        "imageurl": {
          "description": "the url to download the initrd for the boot image",
          "type": "string"
        },
        "kernelurl": {
          "description": "the url to download the kernel for the boot image",
          "type": "string"
        }
      }
    },
    "v1.PartitionCreateRequest": {
      "required": [
        "id",
        "bootconfig"
      ],
      "properties": {
        "bootconfig": {
          "description": "the boot configuration of this partition",
          "$ref": "#/definitions/v1.PartitionBootConfiguration"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "mgmtserviceaddress": {
          "description": "the address to the management service of this partition",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "projectnetworkprefixlength": {
          "description": "the length of project networks for this partition, default 22",
          "type": "integer",
          "format": "int32",
          "maximum": 30,
          "minimum": 16
        }
      }
    },
    "v1.PartitionDetailResponse": {
      "required": [
        "bootconfig",
        "id",
        "created",
        "changed"
      ],
      "properties": {
        "bootconfig": {
          "description": "the boot configuration of this partition",
          "$ref": "#/definitions/v1.PartitionBootConfiguration"
        },
        "changed": {
          "description": "the last changed timestamp of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "mgmtserviceaddress": {
          "description": "the address to the management service of this partition",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "projectnetworkprefixlength": {
          "description": "the length of project networks for this partition, default 22",
          "type": "integer",
          "format": "int32",
          "maximum": 30,
          "minimum": 16
        }
      }
    },
    "v1.PartitionListResponse": {
      "required": [
        "id",
        "bootconfig"
      ],
      "properties": {
        "bootconfig": {
          "description": "the boot configuration of this partition",
          "$ref": "#/definitions/v1.PartitionBootConfiguration"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "mgmtserviceaddress": {
          "description": "the address to the management service of this partition",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "projectnetworkprefixlength": {
          "description": "the length of project networks for this partition, default 22",
          "type": "integer",
          "format": "int32",
          "maximum": 30,
          "minimum": 16
        }
      }
    },
    "v1.PartitionUpdateRequest": {
      "required": [
        "id"
      ],
      "properties": {
        "bootconfig": {
          "description": "the boot configuration of this partition",
          "$ref": "#/definitions/v1.PartitionBootConfiguration"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "mgmtserviceaddress": {
          "description": "the address to the management service of this partition",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      }
    },
    "v1.SizeConstraint": {
      "description": "a machine matches to a size in order to make them easier to categorize",
      "required": [
        "type",
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "the maximum value of the constraint",
          "type": "integer"
        },
        "min": {
          "description": "the minimum value of the constraint",
          "type": "integer"
        },
        "type": {
          "description": "the type of the constraint",
          "type": "string",
          "enum": [
            "cores",
            "memory",
            "storage"
          ]
        }
      }
    },
    "v1.SizeCreateRequest": {
      "required": [
        "id",
        "constraints"
      ],
      "properties": {
        "constraints": {
          "description": "a list of constraints that defines this size",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.SizeConstraint"
          }
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      }
    },
    "v1.SizeDetailResponse": {
      "required": [
        "id",
        "constraints",
        "created",
        "changed"
      ],
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "constraints": {
          "description": "a list of constraints that defines this size",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.SizeConstraint"
          }
        },
        "created": {
          "description": "the creation time of this entity",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      }
    },
    "v1.SizeListResponse": {
      "required": [
        "id",
        "constraints"
      ],
      "properties": {
        "constraints": {
          "description": "a list of constraints that defines this size",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.SizeConstraint"
          }
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      }
    },
    "v1.SizeUpdateRequest": {
      "required": [
        "id"
      ],
      "properties": {
        "constraints": {
          "description": "a list of constraints that defines this size",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.SizeConstraint"
          }
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Managing image entities",
      "name": "image"
    },
    {
      "description": "Managing network entities",
      "name": "network"
    },
    {
      "description": "Managing ip entities",
      "name": "ip"
    },
    {
      "description": "Managing size entities",
      "name": "size"
    },
    {
      "description": "Managing machines",
      "name": "machine"
    },
    {
      "description": "Managing switches",
      "name": "switch"
    }
  ]
}
